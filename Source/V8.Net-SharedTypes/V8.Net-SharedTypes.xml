<?xml version="1.0"?>
<doc>
    <assembly>
        <name>V8.Net-SharedTypes</name>
    </assembly>
    <members>
        <member name="T:V8.Net.ScriptMemberSecurity">
            <summary>
            Flags which Determine the script accessibility.
            </summary>
        </member>
        <member name="F:V8.Net.ScriptMemberSecurity.NoAcccess">
            <summary>
            Used internally to prevent access to a script member on instance types.
            <para>Warning: This has no affect on STATIC bound properties.  There is no such related security option in V8 
            when setting properties. Bound instance objects use an ObjectBinder that wraps an object created from an ObjectTemplate.
            This allows advanced access control.  Class/struct declarations use V8 FunctionTemplates instead, which do not
            provide any callback interception for properties.  If set on the native side (not using ObjectTemplates), then this
            will map to both 'Locked|Hidden' flags being set.</para>
            </summary>
        </member>
        <member name="F:V8.Net.ScriptMemberSecurity.ReadWrite">
            <summary>
            If this flag is set, then the property can be read and/or written to.
            <para>Note: This is the default behaviour, and doesn't need to be explicitly set.</para>
            </summary>
        </member>
        <member name="F:V8.Net.ScriptMemberSecurity.ReadOnly">
            <summary>
            If this flag is set, then the Property can only be read (takes precedence over 'ReadWrite').
            </summary>
        </member>
        <member name="F:V8.Net.ScriptMemberSecurity.Hidden">
            <summary>
            If this flag is set, then the property is hidden from enumeration (but not from access).
            </summary>
        </member>
        <member name="F:V8.Net.ScriptMemberSecurity.Permanent">
            <summary>
            If this flag is set, then the property cannot be deleted (from within the script).
            </summary>
        </member>
        <member name="F:V8.Net.ScriptMemberSecurity.Locked">
            <summary>
            If this flag is set, then the property cannot be deleted OR overwritten (from within the script; this is equal to setting both 'Permanent|ReadOnly' flags).
            </summary>
        </member>
        <member name="T:V8.Net.ScriptMember">
            <summary>
            By default, public class members are NOT accessible by script for security reasons (unless the 'ScriptObject' attribute is used).
            This attribute allows controlling how class members are exposed to the scripting environment.
            </summary>
        </member>
        <member name="M:V8.Net.ScriptMember.#ctor(System.String,V8.Net.ScriptMemberSecurity)">
            <summary>
            Allows controlling how this class member is exposed to the scripting environment.
            </summary>
            <param name="inScriptName">The type name to expose to the scripting environment for this member (default is null/empty, which means use the member name as is).</param>
            <param name="security">The script access security for this member.</param>
        </member>
        <member name="M:V8.Net.ScriptMember.#ctor(V8.Net.ScriptMemberSecurity)">
            <summary>
            Allows controlling how this class member is exposed to the scripting environment.
            </summary>
            <param name="security">The script access security for this member.</param>
        </member>
        <member name="T:V8.Net.ScriptObject">
            <summary>
            This attribute allows specifying the default member access for all public members of a class at once.
            If just the attribute name is used, the security defaults to 'None' (the V8 default) for each member where possible.
            </summary>
        </member>
        <member name="M:V8.Net.ScriptObject.#ctor(System.String,V8.Net.ScriptMemberSecurity)">
            <summary>
            Allows specifying the default member access for all public members of this class at once.
            </summary>
            <param name="typeName">The function name to use when exposing a class to the scripting environment (default is null/empty, which means use the class name as is).</param>
            <param name="security">The global default access for all public class members (default is read/write).</param>
        </member>
        <member name="M:V8.Net.ScriptObject.#ctor(V8.Net.ScriptMemberSecurity)">
            <summary>
            Allows specifying the default member access for all public members of a class at once.
            </summary>
            <param name="security">The global default access for all public class members.</param>
        </member>
        <member name="T:V8.Net.V8PropertyAttributes">
            <summary>
            Flags that describe JavaScript properties.  They must be 'OR'd together as needed.
            </summary>
        </member>
        <member name="F:V8.Net.V8PropertyAttributes.Undefined">
            <summary>
            No valid attribute exists (unlike 'None', which *explicitly* defines that no attributes are set).
            The native PROXY (not V8) will interpret this to mean "let V8 continue on to the default behavior".
            <para>Warning: This cannot be bitwise "OR"ed with the other enum values. Also, this is not supported on the native V8 side.</para>
            </summary>
        </member>
        <member name="F:V8.Net.V8PropertyAttributes.None">
            <summary>
            No attribute is set - keeps the default behaviour of all attributes NOT set.
            <para>Note: When checking object properties for attributes, V8 will return 'None' if a property doesn't exist. 'Undefined' is for V8.Net usage only
            (used with interceptor callbacks/hooks).</para>
            </summary>
        </member>
        <member name="F:V8.Net.V8PropertyAttributes.ReadOnly">
            <summary>
            The property can only be read from.
            </summary>
        </member>
        <member name="F:V8.Net.V8PropertyAttributes.DontEnum">
            <summary>
            The property is visible, but should not be returned during enumeration.
            </summary>
        </member>
        <member name="F:V8.Net.V8PropertyAttributes.DontDelete">
            <summary>
            The property cannot be deleted.
            </summary>
        </member>
        <member name="F:V8.Net.V8PropertyAttributes.Locked">
            <summary>
            This is equal to "ReadOnly | DontDelete", and is a V8.NET specific attribute name.
            It's here because locking down properties is a common operation when adding some fixed global types and objects.
            </summary>
        </member>
        <member name="T:V8.Net.V8AccessControl">
            <summary>
            V8 Access control specification flags.  If some accessors should be accessible across native V8 contexts, then these accessors need an explicit access
            control parameter set which specifies the kind of cross-context access that should be allowed.
            </summary>
        </member>
        <member name="F:V8.Net.V8AccessControl.Undefined">
            <summary>
            No valid access value exists (unlike 'Default', which *explicitly* defines to use the default behavior).
            <para>Note: This value is used internally by V8.NET and is not part of the native V8 system.</para>
            </summary>
        </member>
        <member name="F:V8.Net.V8AccessControl.Default">
            <summary>
            Keeps the default behaviour of "no flags set".
            </summary>
        </member>
        <member name="F:V8.Net.V8AccessControl.AllCanRead">
            <summary>
            The property can be read from all contexts.
            </summary>
        </member>
        <member name="F:V8.Net.V8AccessControl.AllCanWrite">
            <summary>
            The property can be written to by all contexts.
            </summary>
        </member>
        <member name="F:V8.Net.V8AccessControl.ProhibitsOverwriting">
            <summary>
            The accessor cannot be replaced by other contexts.
            </summary>
        </member>
        <member name="T:V8.Net.JSValueType">
            <summary>
            The type of JavaScript values marshalled from the native side.
            </summary>
        </member>
        <member name="F:V8.Net.JSValueType.ExecutionTerminated">
            <summary>
            Script execution was terminated upon request.
            </summary>
        </member>
        <member name="F:V8.Net.JSValueType.ExecutionError">
            <summary>
            An error has occurred while attempting to execute the compiled script.
            </summary>
        </member>
        <member name="F:V8.Net.JSValueType.CompilerError">
            <summary>
            An error has occurred compiling the script (usually a syntax error).
            </summary>
        </member>
        <member name="F:V8.Net.JSValueType.InternalError">
            <summary>
            An internal error has occurred (before or after script execution).
            </summary>
        </member>
        <member name="F:V8.Net.JSValueType.Uninitialized">
            <summary>
            The value has not been read yet from the native V8 handle, so a call to 'V8NetProxy.UpdateHandleValue(_HandleProxy)' is required.
            </summary>
        </member>
        <member name="F:V8.Net.JSValueType.Undefined">
            <summary>
            The value is undefined (no value set).  This is NOT the same as 'null'.
            </summary>
        </member>
        <member name="F:V8.Net.JSValueType.Script">
            <summary>
            The handle proxy represents pre-compiled JavaScript.
            </summary>
        </member>
        <member name="F:V8.Net.JSValueType.Null">
            <summary>
            The value is null (a null object reference).  This is NOT the same as 'undefined' (no value set).
            </summary>
        </member>
        <member name="F:V8.Net.JSValueType.Bool">
            <summary>
            The value is a Boolean, as supported within JavaScript for true/false conditions.
            </summary>
        </member>
        <member name="F:V8.Net.JSValueType.BoolObject">
            <summary>
            The value is a Boolean object (object reference), as supported within JavaScript when executing "new Boolean()".
            </summary>
        </member>
        <member name="F:V8.Net.JSValueType.Int32">
            <summary>
            The value is a 32-bit Integer, as supported within JavaScript for bit operations.
            </summary>
        </member>
        <member name="F:V8.Net.JSValueType.Number">
            <summary>
            The value is a JavaScript 64-bit number.
            </summary>
        </member>
        <member name="F:V8.Net.JSValueType.NumberObject">
            <summary>
            The value is a JavaScript 64-bit Number object (object reference), as supported within JavaScript when executing "new Number()".
            </summary>
        </member>
        <member name="F:V8.Net.JSValueType.String">
            <summary>
            The value is a UTF16 string.
            </summary>
        </member>
        <member name="F:V8.Net.JSValueType.StringObject">
            <summary>
            The value is a JavaScript String object (object reference), as supported within JavaScript when executing "new String()".
            </summary>
        </member>
        <member name="F:V8.Net.JSValueType.Object">
            <summary>
            The value is a non-value (object reference).
            </summary>
        </member>
        <member name="F:V8.Net.JSValueType.Function">
            <summary>
            The value is a reference to a JavaScript function (object reference).
            </summary>
        </member>
        <member name="F:V8.Net.JSValueType.Date">
            <summary>
            The date value is the number of milliseconds since epoch [1970-01-01 00:00:00 UTC+00] (a double value stored in 'Number').
            </summary>
        </member>
        <member name="F:V8.Net.JSValueType.Array">
            <summary>
            The value proxy represents a JavaScript array of various values.
            </summary>
        </member>
        <member name="F:V8.Net.JSValueType.RegExp">
            <summary>
            The value proxy represents a JavaScript regular expression object (object reference).
            </summary>
        </member>
        <member name="T:V8.Net.ProxyObjectType">
            <summary>
            Type of native proxy object (for native class instances only).
            </summary>
        </member>
        <member name="P:V8.Net.HandleProxy.IsActive">
            <summary>
            The handle is still in use.
            </summary>
        </member>
        <member name="P:V8.Net.HandleProxy.IsPendingDisposal">
            <summary>
            The handle has lost all managed side references, OR is being disposed on request for non-objects.
            </summary>
        </member>
        <member name="P:V8.Net.HandleProxy.IsDisposing">
            <summary>
            The handle is going through the disposal process. 
            This us true if either 'IsPendingDisposal' or 'IsWeak' is true. 
            </summary>
        </member>
        <member name="P:V8.Net.HandleProxy.IsWeak">
            <summary>
            The native handle is weak.  The V8 GC will call back to reclaim the persistent handle when ready.
            </summary>
        </member>
        <member name="P:V8.Net.HandleProxy.IsDisposed">
            <summary>
            The native persistent handle is disposed and cached.
            </summary>
        </member>
        <member name="T:V8.Net.ManagedNamedPropertyGetter">
            <summary>
            NamedProperty[Getter|Setter] are used as interceptors on object.
            See ObjectTemplate::SetNamedPropertyHandler.
            </summary>
        </member>
        <member name="T:V8.Net.ManagedNamedPropertySetter">
            <summary>
            Returns the value if the setter intercepts the request.
            Otherwise, returns an empty handle.
            </summary>
        </member>
        <member name="T:V8.Net.ManagedNamedPropertyQuery">
            <summary>
            Returns a non-empty value (>=0) if the interceptor intercepts the request.
            The result is an integer encoding property attributes (like v8::None,
            v8::DontEnum, etc.)
            </summary>
        </member>
        <member name="T:V8.Net.ManagedNamedPropertyDeleter">
            <summary>
            Returns a value indicating if the deleter intercepts the request.
            The return value is true (>0) if the property could be deleted and false (0)
            otherwise.
            </summary>
        </member>
        <member name="T:V8.Net.ManagedNamedPropertyEnumerator">
            <summary>
            Returns an array containing the names of the properties the named
            property getter intercepts.
            </summary>
        </member>
        <member name="T:V8.Net.ManagedIndexedPropertyGetter">
            <summary>
            Returns the value of the property if the getter intercepts __stdcall
            </summary>
        </member>
        <member name="T:V8.Net.ManagedIndexedPropertySetter">
            <summary>
            Returns the value if the setter intercepts the request.
            Otherwise, returns an empty handle.
            </summary>
        </member>
        <member name="T:V8.Net.ManagedIndexedPropertyQuery">
            <summary>
            Returns a non-empty value (>=0) if the interceptor intercepts the request.
            The result is an integer encoding property attributes.
            </summary>
        </member>
        <member name="T:V8.Net.ManagedIndexedPropertyDeleter">
            <summary>
            Returns a value indicating if the deleter intercepts the request.
            The return value is true (>0) if the property could be deleted and false (0)
            otherwise.
            </summary>
        </member>
        <member name="T:V8.Net.ManagedIndexedPropertyEnumerator">
            <summary>
            Returns an array containing the indices of the properties the
            indexed property getter intercepts.
            </summary>
        </member>
        <member name="T:V8.Net.ManagedAccessorSetter">
            <summary>
            Returns the value if the setter intercepts the request.
            Otherwise, returns an empty handle.
            </summary>
        </member>
        <member name="T:V8.Net.ManagedAccessorGetter">
            <summary>
            Returns the value if the setter intercepts the request.
            Otherwise, returns an empty handle.
            </summary>
        </member>
        <member name="T:V8.Net.V8GarbageCollectionRequestCallback">
            <summary>
            Intercepts a request to garbage collect a persistent V8 handle associated with the specified proxy handle.
            Return true to allow the collection, or false to prevent it.
            <para>Note: Internally, this is used to remove the strong reference to managed objects, leaving only a week one.</para>
            </summary>
        </member>
        <member name="M:V8.Net.Exceptions.GetFullErrorMessage(System.Exception,System.Boolean)">
            <summary>
            A simple utility method which formats and returns an exception error object.
            The stack trace is also included. The inner exceptions are also recursed and added.
            </summary>
            <param name="ex">The exception object with error message to format and return.</param>
        </member>
        <member name="T:V8.Net.ObservableWeakReference`1">
            <summary>
            Notifies handlers that an object is ready to be garbage collected.
            To use this you must 1. wrap it in your class and pass it your class reference, 2. override the finalize method for your class and call "Finalize"
            on this weak reference object, and 3. keep a strong reference to this weak reference object so you can check it later (if needed).
            <para>Warning: This event is triggered in the GC thread!</para>
            </summary>
            <typeparam name="T">The object type to keep a reference for.</typeparam>
        </member>
        <member name="E:V8.Net.ObservableWeakReference`1.GCReady">
            <summary>
            Triggered when the GC wants to collect the object.
            </summary>
        </member>
        <member name="P:V8.Net.ObservableWeakReference`1.IsGCReady">
            <summary>
            Is set to true when the GC wants to collect the object.
            </summary>
        </member>
        <member name="P:V8.Net.ObservableWeakReference`1.CanCollect">
            <summary>
            This is false by default, which prevents the object from being finalized in the garbage collection process.
            If you set this to true in an event handler, then upon return the object will continue being finalized.
            </summary>
        </member>
        <member name="P:V8.Net.ObservableWeakReference`1.Object">
            <summary>
            Returns a reference to the object wrapped by this instance.
            This is a weak reference at first, but will return the strong reference when the object is being finalized.
            <para>Note: The GC finalizer clears all weak references before running finalizers on all the objects, which means it's possible that main thread
            code may attempt to read this property, which would end up being 'null'.  However, this would be invalid, due to the fact 'DoFinalize()' hasn't been
            called yet.  To prevent this, this property is blocking (with a 1.5 second timeout) if the target is set to null by the finalizer, until the finalizer 
            triggers a call to 'DoFinalize()'.  As such, this property should never return 'null', unless a timeout occurs (may happen if viewed in a debugger).</para>
            </summary>
        </member>
        <member name="F:V8.Net.ObservableWeakReference`1.NullWaitEvent">
            <summary>
            When a finalizer runs on an object, the GC has already cleared all weak references. This means the main thread can read a null object reference
            before the callback has a chance to reset the reference.  To protect against this, any call on a null reference will block until this event has
            been signalled.
            </summary>
        </member>
        <member name="P:V8.Net.ObservableWeakReference`1.NearDeathReference">
            <summary>
            If 'IsGCReady' returns true, then this is the only reference that is keeping the object alive.
            </summary>
        </member>
        <member name="P:V8.Net.ObservableWeakReference`1.IsNearDeathReference">
            <summary>
            Returns true if an attempt was made to garbage collect the object (see <see cref="P:V8.Net.ObservableWeakReference`1.NearDeathReference"/>).
            </summary>
        </member>
        <member name="M:V8.Net.ObservableWeakReference`1.SetTarget(`0)">
            <summary>
            Changes the underlying target object of the internal weak reference instance.
            Warning: If the previous reference is "near death", it will be reset in order to set the new value.
            </summary>
        </member>
        <member name="M:V8.Net.ObservableWeakReference`1.Reset">
            <summary>
            If 'IsGCReady' is true, then this moves the near death reference back into the weak reference. If not, this method does nothing.
            <para>In either case, the underlying object is returned.</para>
            </summary>
        </member>
        <member name="M:V8.Net.ExtensionMethods.IsConstructedGenericType(System.Type)">
            <summary>
            '{Type}.IsConstructedGenericType' is only supported in .NET 4.5+, so this is a cross-version supported implementation.
            </summary>
        </member>
        <member name="M:V8.Net.ExtensionMethods.Join(System.Collections.IEnumerable,System.String)">
            <summary>
            Convert a list of enumerable items into strings and return the concatenated result.
            </summary>
        </member>
        <member name="M:V8.Net.Utilities.AllocNativeMemory(System.Int32)">
            <summary>
            Allocates native memory.
            </summary>
        </member>
        <member name="M:V8.Net.Utilities.AllocPointerArray(System.Int32)">
            <summary>
            Allocates native memory for storing pointers.
            </summary>
        </member>
        <member name="M:V8.Net.Utilities.FreeNativeMemory(System.IntPtr)">
            <summary>
            Frees native memory allocated with any of the 'Utilities.Alloc???()' methods.
            </summary>
        </member>
        <member name="M:V8.Net.Utilities.MakeHandleProxyArray``1(``0[])">
            <summary>
            Allocates native memory to marshal an array of proxy handles.
            Uses 'Utilities.AllocPointerArray()', so be sure to call 'Utilities.FreeNativeMemory()' when done.
            </summary>
        </member>
        <member name="M:V8.Net.Utilities.ND(System.Object,System.String)">
            <summary>
            Null Default (used mostly with database related data): Returns the value passed, or a default 
            value if the value passed is null, or equal to DBNull.Value.
            </summary>
            <param name="val">Value to check.</param>
            <param name="default_val">New value if "val" is null or DBNull.Value.</param>
            <returns></returns>
        </member>
        <member name="M:V8.Net.Strings.IsNullOrEmpty(System.Object)">
            <summary>
            Returns true if the given object is null, or its string conversion results in an empty/null string.
            </summary>
        </member>
        <member name="M:V8.Net.Strings.IsNullOrWhiteSpace(System.String)">
            <summary>
            Returns true if the string value is null or contains white space (contains all characters less than or equal Unicode value 32).
            </summary>
        </member>
        <member name="M:V8.Net.Strings.SelectNonEmptyString(System.String,System.String,System.String)">
            <summary>
            Selects the first non-null/empty string found in the parameter order given, and returns a default value if
            both are null/empty.
            </summary>
        </member>
        <member name="M:V8.Net.Strings.Join(System.String,System.Object[])">
            <summary>
            Convert a list of objects into strings and return the concatenated result.
            </summary>
        </member>
        <member name="M:V8.Net.Strings.Join(System.String[],System.String[])">
            <summary>
            Join two strings arrays into one big array. The new array is returned.
            </summary>
        </member>
        <member name="M:V8.Net.Strings.CopyTo(System.String[],System.String[],System.Int32)">
            <summary>
            Copies a given source string array into another (destination), returning the destination array.
            </summary>
            <param name="src">The array to copy.</param>
            <param name="dest">The target of the copy.</param>
            <param name="destIndex">The array index into the destination in which copy starts.</param>
        </member>
        <member name="M:V8.Net.Strings.Add(System.String,System.String[])">
            <summary>
            Copies the given string and string array to a new array. The new array is returned.
            </summary>
        </member>
        <member name="M:V8.Net.Strings.S(System.Int32,System.String,System.String,System.String)">
            <summary>
            Returns the singular or plural of a word based on a numerical value.
            </summary>
            <param name="value">Number value.</param>
            <param name="word">Base word, singular.</param>
            <param name="suffix_if_plural">Suffix to use if "value" is not 1.</param>
            <param name="numberFormatting">The number format, if any (optional).</param>
        </member>
        <member name="M:V8.Net.Strings.S(System.Double,System.String,System.String,System.String)">
            <summary>
            Returns the singular or plural of a word based on a numerical value.
            </summary>
            <param name="value">Number value.</param>
            <param name="word">Base word, singular.</param>
            <param name="suffix_if_plural">Suffix to use if "value" is not 1.</param>
            <param name="numberFormatting">The number format, if any (optional).</param>
        </member>
        <member name="M:V8.Net.Strings.Append(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Appends the source string to the target string and returns the result.
            If 'target' and 'source' are both not empty, then the delimiter is inserted between them, and the resulting string returned.
            </summary>
            <param name="target">The string to append to.</param>
            <param name="source">The string to append.</param>
            <param name="delimiter">If specified, the delimiter is placed between the target and source if the target is NOT empty.</param>
            <param name="onlyAddDelimiterIfMissing">Only inserts the delimiter if it is missing from the end of the target and beginning of the source.</param>
            <returns>The new string.</returns>
        </member>
        <member name="M:V8.Net.Strings.CharCount(System.String,System.Char)">
            <summary>
            Returns the number of occurrences of the given character in the given string.
            </summary>
            <param name="str">The string to look in.</param>
            <param name="chr">The character to count.</param>
        </member>
        <member name="M:V8.Net.Strings.TextEqual(System.String,System.String)">
            <summary>
            Performs a textual comparison, where the letter casing is ignored, and returns 'true' if the specified strings are a match.
            </summary>
            <param name="strA">The first string to compare.</param>
            <param name="strB">The second string to compare.</param>
        </member>
        <member name="M:V8.Net.Strings.Limit(System.String,System.UInt32,System.Boolean)">
            <summary>
            Returns the given string up to a maximum of 'maxlength' characters.
            If more than 'maxlength' characters exist, an ellipse character is appended to the returned substring.
            </summary>
        </member>
        <member name="M:V8.Net.Arrays.Concat``1(``0[][])">
            <summary>
            Concatenate a list of arrays. Specify one array for each parameter.
            To concatenate one list of arrays, use Join().
            </summary>
            <typeparam name="T">Array type for each argument.</typeparam>
            <param name="args">A concatenated array made form the specified arrays.</param>
            <returns></returns>
        </member>
        <member name="M:V8.Net.Arrays.Join``1(``0[][])">
            <summary>
            Concatenate a list of arrays.
            </summary>
            <typeparam name="T">Array type for each argument.</typeparam>
            <param name="arrays">A concatenated array made form the specified arrays.</param>
            <returns></returns>
        </member>
        <member name="M:V8.Net.Arrays.FromEnd``1(``0[],System.Int32)">
            <summary>
            Select an item from the end of the array.
            </summary>
            <typeparam name="T">Array type.</typeparam>
            <param name="items">The array.</param>
            <param name="index">0, or a negative value, that is the offset of the item to retrieve.</param>
        </member>
        <member name="M:V8.Net.Arrays.FromEnd``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Select an item from the end of the list.
            </summary>
            <typeparam name="T">List type.</typeparam>
            <param name="items">The list.</param>
            <param name="index">0, or a negative value, that is the offset of the item to retrieve.</param>
        </member>
        <member name="T:V8.Net.Types">
            <summary>
            Provides utility methods for types.
            This class was originally created to support the 'ThreadController" class's "Dispatch()" methods.
            </summary>
        </member>
        <member name="T:V8.Net.Types.Null">
            <summary>
            A structure which represents a 'typed' null value.
            This is required for cases where a type is just 'object', in which 'null' may be passed,
            but the type still needs to be known. An example usage is with methods that accept variable
            number of parameters, but need to know the argument type, even if null.
            </summary>
        </member>
        <member name="M:V8.Net.Types.Arg(System.Type,System.Object)">
            <summary>
            If not null, returns either the argument, otherwise returns argument's 'null' type.
            This is needed in cases where an argument is null, but the argument type is needed.
            <para>
            Example: MyMethod(typeof(DateTime).Arg(value)); - If 'value' is null, then the type is passed instead as 'Types.Null'
            </para>
            </summary>
            <param name="type">Argument type.</param>
            <param name="value">Argument value.</param>
            <returns>Argument value, or the type if null.</returns>
        </member>
        <member name="M:V8.Net.Types.GetTypes(System.Object[])">
            <summary>
            Attempts to get the types of the values passed.
            If a value is 'null', then the call will fail, and 'null' will be returned.
            Note: This method recognizes Types.Null values.
            </summary>
            <param name="args">Argument values to get types for.</param>
        </member>
        <member name="M:V8.Net.Types.ConvertNullsToNullReferences(System.Object[])">
            <summary>
            Converts any Types.Null objects into simple 'null' references.
            This is helpful after using Types.GetTypes() on the same items - once the types are
            retrieved, this method helps to convert Types.Null items back to 'null'.
            </summary>
        </member>
    </members>
</doc>
